from typing import TextIO

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove
from db.users import get_user, update_user_portfolio, get_user_portfolio, delete_user_portfolio
from db.tags import add_tags, get_user_tags
from services.gemini_api import generate_text
import asyncio
from keyboards import reply_keyboard
import json
import os


def load_known_tags():
    if not os.path.exists("known_tags.json"):
        return []
    with open("known_tags.json", "r", encoding="utf-8") as f:
        return json.load(f)


def save_known_tags(tags: list[str]):
    with open("known_tags.json", "w", encoding="utf-8") as f:
        json.dump(sorted(set(tags)), f, ensure_ascii=False, indent=2)


def update_known_tags(new_tags: list[str]):
    known = set(load_known_tags())
    updated = known.union(new_tags)
    save_known_tags(list(updated))


def load_prompt(key: str, path="prompts.json") -> str:
    with open(path, "r", encoding="utf-8") as f:
        prompts = json.load(f)
    return prompts[key]


class PortfolioProcessing(StatesGroup):
    waiting_for_portfolio = State()
    processing = State()
    confirm_tags = State()
    editing = State()


class PortfolioDelete(StatesGroup):
    waiting_for_confirmation = State()


async def show_typing(chat_id, bot):
    while True:
        await bot.send_chat_action(chat_id, "typing")
        await asyncio.sleep(3)


async def start_portfolio_processing(message: types.Message, state: FSMContext):
    await state.set_state(PortfolioProcessing.waiting_for_portfolio)
    await message.answer(
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ.\n"
        "(–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel)",
        reply_markup=ReplyKeyboardRemove()
    )


async def show_portfolio(message: types.Message):
    user_id = message.from_user.id
    portfolio = await get_user_portfolio(user_id)

    if not portfolio:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ.\n"
            "–ù–∞–∂–º–∏—Ç–µ '‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ' —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.",
            reply_markup=reply_keyboard.start_kb
        )
        return

    # debug_tags = await get_user_tags(user_id)
    # print(f"Debug: User {user_id} tags: {debug_tags}")  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å

    await message.answer(
        f"üìÇ –í–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ:\n\n{portfolio}\n\n"
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=reply_keyboard.portfolio_kb
    )


async def back_to_main_menu(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(
        "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=reply_keyboard.user_kb
    )


async def edit_portfolio(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    portfolio = await get_user_portfolio(user_id)

    if not portfolio:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ.\n"
            "–ù–∞–∂–º–∏—Ç–µ '‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ' —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.",
            reply_markup=reply_keyboard.start_kb
        )
        return

    await state.set_state(PortfolioProcessing.editing)
    await message.answer(
        "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n"
        "(–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel)",
        reply_markup=ReplyKeyboardRemove()
    )


USE_AI = True


async def process_portfolio_text(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    portfolio_text = message.text.strip()
    user = await get_user(user_id)

    if not user:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
        await state.finish()
        return

    if len(portfolio_text) >= 1024:
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ")
        return

    current_state = await state.get_state()
    typing_task = asyncio.create_task(show_typing(message.chat.id, message.bot))

    try:
        processing_msg = await message.answer("‚è≥ –°–æ—Ö—Ä–∞–Ω—è—é –≤–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ...")

        tags = []
        is_meaningful = True

        if USE_AI:
            tags, is_meaningful = await _process_portfolio_with_ai(portfolio_text)
            if not is_meaningful or not tags:
                await message.answer(
                    "‚ùå –í–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ–¥–µ–Ω–∏–π.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç."
                )
                return

            update_known_tags(tags)
            await add_tags(user_id, tags)
            print(f"Tags for user {user_id}: {tags}")

        await update_user_portfolio(user_id, portfolio_text)

        if current_state == PortfolioProcessing.editing.state:
            await processing_msg.edit_text("‚úÖ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
            await message.answer("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", reply_markup=reply_keyboard.portfolio_kb)
            await state.finish()
            return

        await processing_msg.edit_text(
            f"üìÇ –í–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ:\n\n{portfolio_text}\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
        )

        async with state.proxy() as data:
            data['portfolio_text'] = portfolio_text
            data['tags'] = tags

        await PortfolioProcessing.confirm_tags.set()
        await message.answer(
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ?",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[
                    [types.KeyboardButton(text="‚úÖ –î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å")],
                    [types.KeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å")],
                ],
                resize_keyboard=True
            )
        )

    except Exception as e:
        print(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")
        await state.finish()
    finally:
        typing_task.cancel()


async def _process_portfolio_with_ai(portfolio_text: str) -> tuple[list[str], bool]:
    try:
        with open("prompts.json", "r", encoding="utf-8") as f:
            prompts = json.load(f)

        known_tags = load_known_tags()
        known_tags_str = ", ".join(known_tags)
        prompt = f"{prompts['generate_tags']}–ò–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–µ–≥–∏: {known_tags_str}\n\n–í–æ—Ç –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ:\n{portfolio_text}"

        response_text = await generate_text(prompt)
        parsed = json.loads(response_text)

        tags = parsed.get("tags", [])
        is_meaningful = parsed.get("mean", ["False"])[0] == "True"

        return tags, is_meaningful

    except Exception as e:
        print(f"JSON parsing error: {e}")
        return [], False


async def confirm_tags_save(message: types.Message, state: FSMContext):
    if message.text == "‚úÖ –î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å":
        async with state.proxy() as data:
            portfolio_text = data['portfolio_text']
            tags = data['tags']
            user_id = message.from_user.id

        await update_user_portfolio(user_id, portfolio_text)
        await add_tags(user_id, tags)

        await message.answer(
            "‚úÖ –í–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!",
            reply_markup=reply_keyboard.user_kb
        )
    else:
        await message.answer(
            "‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.",
            reply_markup=reply_keyboard.start_kb
        )

    await state.finish()


async def cancel_portfolio_processing(message: types.Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id
    portfolio = await get_user_portfolio(user_id)

    if portfolio:
        keyboard = reply_keyboard.user_kb
    else:
        keyboard = reply_keyboard.start_kb

    await message.answer(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=keyboard
    )


async def ask_delete_portfolio(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    portfolio = await get_user_portfolio(user_id)
    if not portfolio:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
            reply_markup=reply_keyboard.user_kb
        )
        return

    await state.set_state(PortfolioDelete.waiting_for_confirmation)

    await message.answer(
        "‚ùó –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å")],
                [types.KeyboardButton("‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å")],
            ],
            resize_keyboard=True
        )
    )


async def confirm_delete_portfolio(message: types.Message, state: FSMContext):
    if message.text == "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å":
        user_id = message.from_user.id
        await delete_user_portfolio(user_id)  # –û—á–∏—â–∞–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
        await add_tags(user_id, [])  # –û—á–∏—â–∞–µ–º —Ç–µ–≥–∏

        await message.answer(
            "üóë –í–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.",
            reply_markup=reply_keyboard.start_kb
        )
    else:
        await message.answer(
            "‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –æ—Å—Ç–∞–ª–æ—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
            reply_markup=reply_keyboard.portfolio_kb
        )

    await state.finish()


def register_handlers(dp: Dispatcher):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.register_message_handler(
        start_portfolio_processing,
        text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ",
        state="*"
    )
    dp.register_message_handler(
        show_portfolio,
        text="üìÇ –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ",
    )
    dp.register_message_handler(
        edit_portfolio,
        text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ",
        state="*"
    )
    dp.register_message_handler(
        back_to_main_menu,
        text="üîô –ù–∞–∑–∞–¥",
        state="*"
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    dp.register_message_handler(
        cancel_portfolio_processing,
        commands=["cancel"],
        state=PortfolioProcessing.all_states
    )
    dp.register_message_handler(
        process_portfolio_text,
        state=[PortfolioProcessing.waiting_for_portfolio, PortfolioProcessing.editing],
        content_types=types.ContentType.TEXT
    )
    dp.register_message_handler(
        confirm_tags_save,
        state=PortfolioProcessing.confirm_tags,
        content_types=types.ContentType.TEXT
    )
    dp.register_message_handler(
        ask_delete_portfolio,
        text="‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ",
        state="*"
    )
    dp.register_message_handler(
        confirm_delete_portfolio,
        state=PortfolioDelete.waiting_for_confirmation,
        content_types=types.ContentType.TEXT
    )
