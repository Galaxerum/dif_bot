from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode, ReplyKeyboardRemove
from db.users import get_user, update_user_portfolio, get_user_portfolio
from db.tags import add_tags, get_user_tags
from services.gemini_api import generate_text
import json
import asyncio
from keyboards import reply_keyboard  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã


class PortfolioProcessing(StatesGroup):
    waiting_for_portfolio = State()
    processing = State()
    confirm_tags = State()
    editing = State()


async def show_typing(chat_id, bot):
    while True:
        await bot.send_chat_action(chat_id, "typing")
        await asyncio.sleep(3)


async def start_portfolio_processing(message: types.Message):
    await PortfolioProcessing.waiting_for_portfolio.set()
    await message.answer(
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n"
        "–Ø —Ä–∞–∑–±–µ—Ä—É –µ–≥–æ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–≥–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—é.\n\n"
        "(–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel)",
        reply_markup=ReplyKeyboardRemove()
    )


async def show_portfolio(message: types.Message):
    user_id = message.from_user.id
    portfolio = await get_user_portfolio(user_id)

    if not portfolio:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /portfolio —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.",
            reply_markup=reply_keyboard.user_kb
        )
        return

    # –î–ª—è –¥–µ–±–∞–≥–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
    debug_tags = await get_user_tags(user_id)
    print(f"Debug: User {user_id} tags: {debug_tags}")  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å

    await message.answer(
        f"üìÇ –í–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ:\n\n{portfolio}\n\n"
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=reply_keyboard.portfolio_kb
    )


async def edit_portfolio(message: types.Message):
    await PortfolioProcessing.editing.set()
    await message.answer(
        "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n"
        "(–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel)",
        reply_markup=ReplyKeyboardRemove()
    )


async def process_portfolio_text(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    portfolio_text = message.text.strip()

    user = await get_user(user_id)
    if not user:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
        await state.finish()
        return

    current_state = await state.get_state()
    if current_state == PortfolioProcessing.editing.state:
        # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await update_user_portfolio(user_id, portfolio_text)
        await message.answer(
            "‚úÖ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
            reply_markup=reply_keyboard.user_kb
        )
        await state.finish()
        return

    await PortfolioProcessing.processing.set()
    async with state.proxy() as data:
        data['portfolio_text'] = portfolio_text

    typing_task = asyncio.create_task(show_typing(message.chat.id, message.bot))

    try:
        processing_msg = await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ...")

        tags = await generate_text(
            f"–†–∞–∑–±–µ–π —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –Ω–∞ —Ç–µ–≥–∏. –û—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≤–∏–¥–µ —Ñ–æ—Ä–º–∞—Ç–∞ JSON. –ú–∞–∫—Å–∏–º—É–º 2048 —Å–∏–º–≤–æ–ª–æ–≤. "
            f"–û—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–∏–µ. –¢–µ–≥–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 5.\n"
            f"–í–æ—Ç –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {portfolio_text}"
        )

        # –î–ª—è –¥–µ–±–∞–≥–∞ –≤—ã–≤–æ–¥–∏–º —Ç–µ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
        print(f"Debug: Generated tags for user {user_id}: {tags}")

        await processing_msg.delete()
        await message.answer("üîç –¢–µ–≥–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

        async with state.proxy() as data:
            data['tags'] = tags

        await PortfolioProcessing.confirm_tags.set()
        await message.answer(
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ?",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[
                    [types.KeyboardButton(text="‚úÖ –î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å")],
                    [types.KeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å")],
                ],
                resize_keyboard=True
            )
        )

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")
        await state.finish()
    finally:
        typing_task.cancel()

async def confirm_tags_save(message: types.Message, state: FSMContext):
    if message.text == "‚úÖ –î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å":
        async with state.proxy() as data:
            portfolio_text = data['portfolio_text']
            tags = data['tags']
            user_id = message.from_user.id

        await update_user_portfolio(user_id, portfolio_text)
        await add_tags(user_id, tags)

        await message.answer(
            "‚úÖ –í–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!",
            reply_markup=reply_keyboard.user_kb
        )
    else:
        await message.answer(
            "‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.",
            reply_markup=reply_keyboard.user_kb
        )

    await state.finish()


async def cancel_portfolio_processing(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=reply_keyboard.user_kb
    )


def register_handlers(dp: Dispatcher):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.register_message_handler(
        start_portfolio_processing,
        commands=["portfolio"],
        state="*"
    )
    dp.register_message_handler(
        show_portfolio,
        text="üìÇ –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ",
        state="*"
    )
    dp.register_message_handler(
        edit_portfolio,
        text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ",
        state="*"
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    dp.register_message_handler(
        cancel_portfolio_processing,
        commands=["cancel"],
        state=PortfolioProcessing.all_states
    )
    dp.register_message_handler(
        process_portfolio_text,
        state=[PortfolioProcessing.waiting_for_portfolio, PortfolioProcessing.editing],
        content_types=types.ContentType.TEXT
    )
    dp.register_message_handler(
        confirm_tags_save,
        state=PortfolioProcessing.confirm_tags,
        content_types=types.ContentType.TEXT
    )