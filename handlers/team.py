from aiogram import types
from aiogram.types import ParseMode
from aiogram import Dispatcher
from db.teams import TeamDistributor
from db.admin import get_admin_user_ids
import sqlite3


async def generate_teams(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user_id = message.from_user.id
    admin_ids = await get_admin_user_ids()

    if user_id not in admin_ids:
        return

    try:
        with TeamDistributor() as distributor:
            distributor.setup_colors({
                "–†–æ–∑–æ–≤—ã–µ": 5,
                "–ñ–µ–ª—Ç—ã–µ": 18,
                "–ó–µ–ª–µ–Ω—ã–µ": 1,
                "–ë–µ–ª—ã–µ": 9,
            })
            distributor.distribute_users(max_team_size=10)

        # 2. –†–∞—Å—Å—ã–ª–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        await send_team_notifications(message.bot)

        await message.answer("‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑–æ—Å–ª–∞–Ω—ã!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥: {str(e)}")


async def send_team_notifications(bot):
    conn = sqlite3.connect("main.db")
    conn.row_factory = sqlite3.Row

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        cursor = conn.cursor()
        cursor.execute("""
            SELECT t.id, t.colors, 
                   GROUP_CONCAT(u.user_id) as user_ids,
                   GROUP_CONCAT(u.username) as usernames
            FROM teams t
            JOIN users u ON t.id = u.team_id
            WHERE u.relevance = 1
            GROUP BY t.id
        """)

        for team in cursor.fetchall():
            team_id = team["id"]
            color = team["colors"]
            user_ids = team["user_ids"].split(",") if team["user_ids"] else []
            usernames = team["usernames"].split(",") if team["usernames"] else []

            members_list = "\n".join(
                [f"- @{username}" for username in usernames if username]
            )

            message_text = (
                f"üéâ –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                f"üîπ –ù–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: {team_id}\n"
                f"üé® –¶–≤–µ—Ç –∫–æ–º–∞–Ω–¥—ã: {color}\n\n"
                f"üë• –°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã:\n{members_list}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
            for user_id in user_ids:
                try:
                    await bot.send_message(
                        chat_id=int(user_id),
                        text=message_text,
                        parse_mode=ParseMode.HTML
                    )
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    finally:
        conn.close()


async def team_info(message: types.Message):
    user_id = message.from_user.id

    conn = sqlite3.connect("main.db")
    conn.row_factory = sqlite3.Row

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor = conn.cursor()
        cursor.execute("""
            SELECT t.id as team_id, t.colors, 
                   GROUP_CONCAT(u.username) as members
            FROM users u
            JOIN teams t ON u.team_id = t.id
            WHERE u.user_id = ? AND u.relevance = 1
            GROUP BY t.id
        """, (user_id,))

        team = cursor.fetchone()
        print(team)

        if not team:
            await message.answer("–í—ã –ø–æ–∫–∞ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        members = team["members"].split(",") if team["members"] else []
        members_list = "\n".join([f"- @{m}" for m in members if m])

        response = (
            f"üîπ –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞: ‚Ññ{team['team_id']}\n"
            f"üé® –¶–≤–µ—Ç: {team['colors']}\n\n"
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{members_list}"
        )

        await message.answer(response, parse_mode=ParseMode.HTML)
    finally:
        conn.close()

async def clear_teams(message: types.Message):
    user_id = message.from_user.id
    admin_ids = await get_admin_user_ids()

    if user_id not in admin_ids:
        return

    with TeamDistributor() as distributor:
        distributor.clear_all_teams()
    await message.answer("‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!")


def register_handlers(dp: Dispatcher):
    dp.register_message_handler(generate_teams, commands=["generate_teams"])
    dp.register_message_handler(clear_teams, commands=["clear_teams"])
    dp.register_message_handler(team_info, text="üë• –ú–æ—è –∫–æ–º–∞–Ω–¥–∞")