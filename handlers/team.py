from aiogram import types
from aiogram.dispatcher.filters import BoundFilter
from aiogram import Dispatcher
from db.teams import TeamDistributor
from db.admin import get_admin_user_ids
from app.config import bot
import aiosqlite
import asyncio


class IsAdminFilter(BoundFilter):
    key = 'is_admin'

    def __init__(self, is_admin):
        self.is_admin = is_admin

    async def check(self, message: types.Message):
        admin_ids = await get_admin_user_ids()
        return message.from_user.id in admin_ids


def register_filters(dp: Dispatcher):
    dp.filters_factory.bind(IsAdminFilter)


async def get_user_display_info(user_id: int) -> str:
    try:
        chat = await bot.get_chat(user_id)
        if chat.username:
            return f"@{chat.username}"
        name = " ".join(filter(None, [chat.first_name, chat.last_name]))
        return name or f"ID{user_id}"
    except Exception:
        return f"ID{user_id}"


async def generate_teams(message: types.Message):
    if message.from_user.id not in await get_admin_user_ids():
        return

    try:
        with TeamDistributor() as distributor:
            distributor.setup_colors({
                "–†–æ–∑–æ–≤—ã–µ": 1,
                "–ñ—ë–ª—Ç—ã–µ": 0,
                "–ó–µ–ª—ë–Ω—ã–µ": 0,
                "–ë–µ–ª—ã–µ": 0,
            })
            distributor.distribute_users(max_team_size=2)

        await send_team_notifications()
        await message.answer("‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑–æ—Å–ª–∞–Ω—ã!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


async def send_team_notifications():
    async with aiosqlite.connect("main.db") as conn:
        conn.row_factory = aiosqlite.Row
        cursor = await conn.execute("""
            SELECT t.id, t.colors, GROUP_CONCAT(u.user_id) as user_ids
            FROM teams t
            JOIN users u ON t.id = u.team_id
            WHERE u.relevance = 1
            GROUP BY t.id
        """)

        teams = await cursor.fetchall()
        tasks = []

        for team in teams:
            user_ids = team["user_ids"].split(",") if team["user_ids"] else []

            members_info = await asyncio.gather(
                *[get_user_display_info(int(user_id)) for user_id in user_ids],
                return_exceptions=True
            )

            members_list = "\n".join(
                f"- {info}" if not isinstance(info, Exception)
                else f"- ID{user_id}"
                for user_id, info in zip(user_ids, members_info)
            )

            message_text = (
                f"üéâ –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                f"üîπ –ù–æ–º–µ—Ä: {team['id']}\n"
                f"üé® –¶–≤–µ—Ç: {team['colors']}\n\n"
                f"üë• –°–æ—Å—Ç–∞–≤:\n{members_list}"
            )

            tasks.extend(
                bot.send_message(
                    chat_id=int(user_id),
                    text=message_text,
                    parse_mode="HTML"
                ) for user_id in user_ids
            )

        await asyncio.gather(*tasks, return_exceptions=True)


async def team_info(message: types.Message):
    user_id = message.from_user.id

    async with aiosqlite.connect("main.db") as conn:
        conn.row_factory = aiosqlite.Row

        # –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º team_id —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor = await conn.execute("""
            SELECT team_id FROM users 
            WHERE user_id = ? AND relevance = 1
        """, (user_id,))

        user_team = await cursor.fetchone()
        if not user_team:
            await message.answer("–í—ã –ø–æ–∫–∞ –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–µ.")
            return

        team_id = user_team["team_id"]

        cursor = await conn.execute("""
            SELECT user_id FROM users 
            WHERE team_id = ? AND relevance = 1
        """, (team_id,))

        member_ids = [row["user_id"] for row in await cursor.fetchall()]

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
        members_info = await asyncio.gather(
            *[get_user_display_info(member_id) for member_id in member_ids],
            return_exceptions=True
        )

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–º–æ–π –∫–æ–º–∞–Ω–¥–µ (—Ü–≤–µ—Ç)
        cursor = await conn.execute("""
            SELECT colors FROM teams WHERE id = ?
        """, (team_id,))
        team_info = await cursor.fetchone()
        color = team_info["colors"] if team_info else "–ù–µ —É–∫–∞–∑–∞–Ω"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        members_list = "\n".join(
            f"- {info}" if not isinstance(info, Exception)
            else f"- [–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member_id}]"
            for member_id, info in zip(member_ids, members_info)
        )

        await message.answer(
            f"üîπ –ö–æ–º–∞–Ω–¥–∞ ‚Ññ{team_id}\n"
            f"üé® –¶–≤–µ—Ç: {color}\n\n"
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{members_list}",
            parse_mode="HTML"
        )


async def clear_teams(message: types.Message):
    if message.from_user.id not in await get_admin_user_ids():
        return

    with TeamDistributor() as distributor:
        distributor.clear_all_teams()
    await message.answer("‚úÖ –ö–æ–º–∞–Ω–¥—ã –æ—á–∏—â–µ–Ω—ã!")


async def notify_empty_portfolio(message: types.Message):
    if message.from_user.id not in await get_admin_user_ids():
        return

    async with aiosqlite.connect("main.db") as conn:
        conn.row_factory = aiosqlite.Row
        cursor = await conn.execute("""
            SELECT user_id FROM users 
            WHERE portfolio IS NULL OR portfolio = ''
        """)

        users_with_empty_portfolio = await cursor.fetchall()

        if not users_with_empty_portfolio:
            await message.answer("‚úÖ –£ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ!")
            return

        total_count = len(users_with_empty_portfolio)
        progress_message = await message.answer(
            f"üîî –ù–∞–π–¥–µ–Ω–æ {total_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—É—Å—Ç—ã–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ\n\n"
            f"üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...\n"
            f"0/{total_count} (0%)"
        )

        success = 0
        failed = 0
        text = (
            "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞\n\n"
            "–í–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ. –≠—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –≤–∞—à–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–∏—è:\n\n"
            "‚Ä¢ –í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –±—ã—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ –∫–æ–º–∞–Ω–¥—É\n"
            "‚Ä¢ –î—Ä—É–≥–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ —É–≤–∏–¥—è—Ç –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥-—Å–µ—Å—Å–∏—è–º –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω\n\n"
            "üìå <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ:</b>\n"
            "1) –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–°–æ–∑–¥–∞—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ¬ª\n"
            "2) –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç\n"
            "3) –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏\n"
            "4) –û–ø–∏—à–∏—Ç–µ —Ü–µ–ª–∏ –¥–ª—è –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞\n\n"
            "–≠—Ç–æ –∑–∞–π–º—ë—Ç 2 –º–∏–Ω—É—Ç—ã, –Ω–æ –æ—Ç–∫—Ä–æ–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º —Å–∏—Å—Ç–µ–º—ã. "
            "–ù–∞—à–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π - "
            "–¥–∞–π—Ç–µ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–∑–Ω–∞—Ç—å –æ –≤–∞—Å.\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!"
        )

        for index, user in enumerate(users_with_empty_portfolio, 1):
            try:
                await bot.send_message(
                    chat_id=user["user_id"],
                    text=text,
                    parse_mode="HTML"
                )
                success += 1
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {str(e)}")
                failed += 1

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            progress = int((index / total_count) * 100)
            await progress_message.edit_text(
                f"üîî –ù–∞–π–¥–µ–Ω–æ {total_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
                f"üîÑ –†–∞—Å—Å—ã–ª–∫–∞...\n"
                f"{index}/{total_count} ({progress}%)\n\n"
                f"‚úì –£—Å–ø–µ—à–Ω–æ: {success}\n"
                f"‚úï –û—à–∏–±–∫–∏: {failed}"
            )

            await asyncio.sleep(0.3)  # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

        await progress_message.edit_text(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_count}\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
            f"‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed}\n\n"
        )


def register_handlers(dp: Dispatcher):
    register_filters(dp)

    dp.register_message_handler(
        generate_teams,
        commands=["generate_teams"],
        is_admin=True
    )
    dp.register_message_handler(
        clear_teams,
        commands=["clear_teams"],
        is_admin=True
    )
    dp.register_message_handler(
        team_info,
        text="üë• –ú–æ—è –∫–æ–º–∞–Ω–¥–∞"
    )
    dp.register_message_handler(
        notify_empty_portfolio,
        commands=["notify_empty_portfolio"],
        is_admin=True
    )