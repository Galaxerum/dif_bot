from aiogram import types
from db.users import add_user, get_user_portfolio, get_user, set_relevance_true_by_user_id
from db.admin import add_admin
from db.models import User
from keyboards import reply_keyboard
from aiogram import Dispatcher
from dotenv import load_dotenv
import json
import os
from pathlib import Path

load_dotenv()

SPECIAL_ADMIN_CODE=os.getenv("SPECIAL_ADMIN_CODE")


async def is_valid_token(token: str) -> bool:
    if not Path("tokens.json").exists():
        return False

    with open("tokens.json", "r") as f:
        data = json.load(f)
        return data.get("activation_token") == token

async def start_handler(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    args = message.get_args()


    if not await get_user(user_id):
        user = User(user_id=user_id, username=username, portfolio="", team_id=None)
        await add_user(user)

    portfolio = await get_user_portfolio(user_id)
    user = await get_user(user_id)

    if not args:
        if not portfolio or portfolio.strip() == "":
            greeting = (
                f"üëã–ü—Ä–∏–≤–µ—Ç, {first_name}!\n"
                "–Ø ‚Äî –ö–æ–º—å—é–Ω–∏—Ç–∏ –ë–æ—Ç –°–∏–ª—ã –°–æ–æ–±—â–µ—Å—Ç–≤.\n"
                "–ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å —Ç–µ–±—è —Å –ª—é–¥—å–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å—Ç–∞—Ç—å —Ç–≤–æ–∏–º–∏ —Å–æ—é–∑–Ω–∏–∫–∞–º–∏, –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º–∏, –∞ –º–æ–∂–µ—Ç, –∏ –¥—Ä—É–∑—å—è–º–∏.\n"
                "–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ ‚Äî –∏ —è –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–µ–±–µ ¬´—Å–≤–æ–∏—Ö¬ª –≤ —ç—Ç–æ–º –∑–∞–ª–µ."
                "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
            )
            await message.answer(greeting, reply_markup=reply_keyboard.start_kb)
        else:
            greeting = f"–ü—Ä–∏–≤–µ—Ç, {user.username}! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
            await message.answer(greeting, reply_markup=reply_keyboard.user_kb)

    elif args == SPECIAL_ADMIN_CODE:
        await add_admin(user_id)
        await message.answer("‚úÖ –í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–æ–º! /admin_help –¥–ª—è –≤—ã–∑–æ–≤–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")

    elif args.startswith("activate_"):
        try:
            token = args.split("_")[1]

            if await is_valid_token(token):
                await set_relevance_true_by_user_id(user_id)
                await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!")
            else:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
        except IndexError:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏.")




def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start_handler, commands=["start"])
